
require:
   quaint -> Source
   /html


provide:
   Q
   customize
   make-q


class Embedded:
   constructor{@x} = pass


mknode{match node} =
   Embedded? {=> x} ->
      x
   String? or Number? or Boolean? or null? or undefined? ->
      #value{node}
   Array? ->
      #data{*[node each x -> mknode{x}]}
   ENode? {=> tags, => props, => children} ->
      `ENode{^mknode{tags}, ^mknode{props}, ^mknode{children}}`
   Object? o ->
      xs =
         items{o} each {k, v} ->
            `[^=k => ^mknode{v}]`
      if xs.length >= 1:
         #data{*xs}
      else:
         `{=}`


macro customize{match arg} =
   `{^body}` ->
      it = @mark{`@`}
      previous = @getopt{.quaint-plugins}
      new-plugins = {@go{`{^it} -> ^body`, .parse, .eval}}
      next = [previous or {}] ++ new-plugins
      @setopt{.quaint-plugins, next}
      #option{.quaint-plugins, next}
   else ->
      throw E.syntax.Q.customize{'Wrong syntax to customize Q.', node = arg}


make-q{options = {=}} =
   options.plugins or= {}
   macro{html} QQ{match arg} =
      `.customize` ->
         #macro with {_, info, _, arg} ->
            customize.call{info, arg}
      #value{String? s} ->
         q = quaint{*options.plugins}
         q.plug{*plugins} where
            plugins = @getopt{.quaint-plugins} or {}
         q.register-rules with {
            "{\\x}"{engine, {=> x}} =
               Embedded with @mark with
                  @go{Source{x.location.text{}, "<quaint>"}, .source, .parse}
         }
         res = mknode with q.toENode{s}
         match options.format as fmt:
            .html ->
               `[^ @deps.html]{^res}`
            .text or .string ->
               `String{^res}`
            ENode? or undefined? ->
               res
            else ->
               throw E.syntax.Q{'Unknown format for Q: "{fmt}"', node = arg}
      {=> plugins = null, => format = null} when plugins or format ->
         make-q{arg}
      else ->
         throw E.syntax.Q{'Macro Q must be given a string literal.', node = arg}
   QQ


Q = make-q{}
